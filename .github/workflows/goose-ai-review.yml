name: Goose

on:   
   pull_request:
      types: [opened, synchronize, reopened, labeled]
   issues:
      types: labeled
   issue_comment:
      types: created

permissions:
   contents: write
   pull-requests: write
   issues: write

env:
   GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
   PR_NUMBER: ${{ github.event.pull_request.number }}
   GITHUB_TOKEN: ${{ github.token }}

jobs:
   goose-comment:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Gather PR information
          run: |
            {
              echo "# Files Changed"
              gh pr view $PR_NUMBER --json files \
              -q '.files[] | "* " + .path + " (" + (.additions|tostring) + " additions, " + (.deletions|tostring) + " deletions)"'
              echo ""
              echo "# Changes Summary"
              gh pr diff $PR_NUMBER
            } > changes.txt

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Create instructions for Goose
          run: |
            cat <<EOF > instructions.txt
            Create a summary of the changes provided. Don't provide any session or logging details.
            The summary for each file should be brief and structured as:
            <filename/path (wrapped in backticks)>
                  - dot points of changes
            You don't need any extensions, don't mention extensions at all.
            The changes to summarise are:
            $(cat changes.txt)
            EOF

        - name: Test
          run: cat instructions.txt

        - name: Run Goose and filter output
          run: |
            goose run --instructions instructions.txt | \
            # Remove ANSI color codes
            sed -E 's/\x1B\[[0-9;]*[mK]//g' | \
            # Remove session/logging lines
            grep -v "logging to /home/runner/.config/goose/sessions/" | \
            grep -v "^starting session" | \
            grep -v "^Closing session" | \
            # Trim trailing whitespace
            sed 's/[[:space:]]*$//' \
            > pr_comment.txt

        - name: Post comment to PR
          run: |
            cat -A pr_comment.txt
            gh pr comment $PR_NUMBER --body-file pr_comment.txt

   ask-goose:
      if: github.event.label.name == 'goose' or ${{ github.event.issue.pull_request && contains(github.event.comment.body, '@goose--ai')}}
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Determine and Checkout Correct Branch
          shell: bash
          run: |
            # Determine if the event is a PR comment
            if [[ "${{ github.event_name }}" == "issue_comment" && "$(jq -r '.issue.pull_request' "$GITHUB_EVENT_PATH")" != "null" ]]; then
              echo "Triggered by a comment on a PR."

              # Extract the PR number from the event payload
              PR_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
              
              # Use the GitHub API to get the PR details
              PR_DATA=$(curl -s -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
              
              # Extract the head ref (branch name)
              PR_HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
              echo "PR head ref is $PR_HEAD_REF"

              # Fetch and checkout the PR branch
              git fetch origin "$PR_HEAD_REF"
              git checkout "$PR_HEAD_REF"
            else
              echo "Not a PR comment event. Using the default branch."
            fi

        - name: Create plan for labelled issue
          if: ${{ github.event_name == 'issues' && github.event.action == 'labeled' }}
          shell: bash
          run: |
            printf "%s\n" \
              "kickoff_message: |" \
              "  This will follow tasks as given for the project and then try to complete them without input." \
              "  The tasks may be an enhancement, or a bug fix which came from an issue tracker." \
              "" \
              "tasks:" \
              "  - you are running in a CI-style environment and aim to try to complete the task assigned; the result will be changes to the code that are verified." \
              "  - keep iterating to completion until the task is satisfied, and tests are run." \
              "  - you will not be able to ask the user to take any steps, you have to do this on your own. You can do research (curl websites as needed)." \
              "  - decide if you are working on net new code or existing code." \
              "  - Try at least 3 approaches if you fail, do not just stop." \
              "  - use '&' if you need to run processes in the background as part of testing." \
              "  - Read ./task.txt for instructions on what issue(s) to do or fix, and then read ./validation.txt for how to know if the change or fix is working." \
              > plan.yaml

        - name: Create plan for PR feedback
          if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null && !contains(github.event.comment.body, 'goose-ai rollback') }}
          shell: bash
          run: |
            printf "%s\n" \
              "kickoff_message: |" \
              "  This will follow tasks as given for the project and then try to complete them end-to-end without input." \
              "  Feedback from past comments will be considered." \
              "" \
              "tasks:" \
              "  - You are working on a work in progress github pull request in a github workflow environment." \
              "  - get all feedback from previous pull request comments and include that with task." \
              "  - gh cli is available, as is GITHUB_CONTEXT environment variable for context." \
              "  - iterate to satisfy the task, validating it, and trying a few approaches if first failing, ensuring to take note of comments." \
              "  - Read ./task.txt for instructions on what to address, and ./validation.txt for how to know if the change is working. Important to address recent comment history for the current pull request." \
              > plan.yaml

        - name: Create task.txt and validation.txt
          if: ${{ !contains(github.event.comment.body, 'goose-ai rollback') }}
          shell: bash
          run: |
            echo "${{ github.event.issue.title }}" > task.txt
            echo "${{ github.event.issue.body }}" > validation.txt

        - name: Run Goose Session
          if: ${{ !contains(github.event.comment.body, 'goose-ai rollback') }}
          shell: bash
          env: 
            GITHUB_CONTEXT: ${{ toJson(github) }}
          run: |
            set -e

            echo "Task Request: ${{ github.event.issue.title }}" > task.txt
            echo "Validation: ${{ github.event.issue.body }}" > validation.txt

            # Start the Goose session
            cd "$GITHUB_WORKSPACE"

            goose run plan.yaml
            rm -f task.txt validation.txt plan.yaml

        - name: Generate branch, commit, push, and create pull request for labelled issue
          if: ${{github.event_name == 'issues' && github.event.action == 'labeled' }}
          shell: bash
          run: |
            # Generate a slug from the issue title, replacing spaces with dashes and ensuring lowercase
            SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')
            
            # Construct the full branch name
            BRANCH_NAME="goose-ai/$SLUG-$(date +%s)"

            # Check out a new branch using the dynamically generated name
            git checkout -b $BRANCH_NAME

            # Configure git user
            git config --global user.email "goose-ai@block.xyz"
            git config --global user.name "goose"

            # Add and commit changes
            git add .
            git commit -m "Changes from Goose AI"

            # Push the branch to the remote repository
            git push origin $BRANCH_NAME

            # Create a pull request using the GitHub CLI
            gh pr create --head $BRANCH_NAME --title "${{ github.event.issue.title }}" --body "Resolves issue: ${{ github.event.issue.html_url }} ${{ github.event.issue.body }}

            Note: You can mention @goose-ai in a comment to request changes or improvements to this pull request."

        - name: Commit and Push Changes for PR Comment
          if: ${{github.event_name == 'issue_comment' && github.event.issue.pull_request != null && !contains(github.event.comment.body, 'goose-ai rollback') }}
          shell: bash
          run: |
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git add .
              git commit -m "Comments addressed by goose AI"
              # Push changes to the current branch (which is the PR branch)
              git push origin HEAD
              
              # Add a comment to the PR
              PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
              gh pr comment $PR_NUMBER --body "_changes made by goose AI._ :bulb: **TIP:** Use \`@ goose-ai rollback\` (no space after @) to undo these changes."


        - name: Rollback Changes
          if: ${{github.event_name == 'issue_comment' && github.event.issue.pull_request != null && contains(github.event.comment.body, 'goose-ai rollback') }}
          shell: bash
          run: |
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              
              # Find the last commit with the message "Comments addressed by goose AI"
              COMMIT_TO_REVERT=$(git log --grep="Comments addressed by goose AI" -n 1 --pretty=format:"%H")
              
              if [ -n "$COMMIT_TO_REVERT" ]; then
                # Revert the commit
                git revert --no-edit $COMMIT_TO_REVERT
                
                # Push the revert commit
                git push origin HEAD
                
                # Add a comment to the PR
                PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
                gh pr comment $PR_NUMBER --body "Successfully reverted the last goose AI changes."
                
                echo "_Successfully reverted the last goose AI changes._"
              else
                echo "No commit found with the message 'Comments addressed by goose AI'. Nothing to revert."
              fi
      