name: Goose

on:   
   pull_request:
      types: [opened, synchronize, reopened, labeled]
   issues:
      types: labeled
   issue_comment:
      types: created

permissions:
   contents: write
   pull-requests: write
   issues: write

env:
   GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
   PR_NUMBER: ${{ github.event.pull_request.number }}
   GITHUB_TOKEN: ${{ github.token }}

jobs:
   goose-comment:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Gather PR information
          run: |
            {
              echo "# Files Changed"
              gh pr view $PR_NUMBER --json files \
              -q '.files[] | "* " + .path + " (" + (.additions|tostring) + " additions, " + (.deletions|tostring) + " deletions)"'
              echo ""
              echo "# Changes Summary"
              gh pr diff $PR_NUMBER
            } > changes.txt

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Create instructions for Goose
          run: |
            cat <<EOF > instructions.txt
            Create a summary of the changes provided. Don't provide any session or logging details.
            The summary for each file should be brief and structured as:
            <filename/path (wrapped in backticks)>
                  - dot points of changes
            You don't need any extensions, don't mention extensions at all.
            The changes to summarise are:
            $(cat changes.txt)
            EOF

        - name: Test
          run: cat instructions.txt

        - name: Run Goose and filter output
          run: |
            goose run --instructions instructions.txt | \
            # Remove ANSI color codes
            sed -E 's/\x1B\[[0-9;]*[mK]//g' | \
            # Remove session/logging lines
            grep -v "logging to /home/runner/.config/goose/sessions/" | \
            grep -v "^starting session" | \
            grep -v "^Closing session" | \
            # Trim trailing whitespace
            sed 's/[[:space:]]*$//' \
            > pr_comment.txt

        - name: Post comment to PR
          run: |
            cat -A pr_comment.txt
            gh pr comment $PR_NUMBER --body-file pr_comment.txt

   ask-goose:
      if: github.event.label.name == 'goose' || (github.event.issue.pull_request && contains(github.event.comment.body, '@goose-ai'))
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Install GitHub CLI
          run: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
            sudo apt-add-repository https://cli.github.com/packages
            sudo apt update
            sudo apt install -y gh

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Create instructions file
          if: github.event_name == 'issues' && github.event.action == 'labeled'
          shell: bash
          run: |
            # Generate a slug from the issue title
            SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')

            # Construct the branch name
            BRANCH_NAME="goose-ai/$SLUG-$(date +%s)"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

            cat > instructions.txt << EOF
            # Development Task: ${{ github.event.issue.title }}

            ## Task Description

            ${{ github.event.issue.body }}

            ## Your Objective
            
            You need to:
            1. Understand the task described in the issue
            2. Create the necessary code changes to implement the requested functionality
            3. Provide clear explanations for what you've done

            ## Repository Structure
            
            $(find . -type f -not -path "*/\.*" -not -path "*/node_modules/*" | head -n 30 | sort)
            
            ## Implementation Guidelines
            
            1. Create or modify files as needed to implement the requested functionality
            2. Make your changes directly - don't use any helper scripts
            3. Structure your response as follows:
            - First explain your implementation approach
            - Then list each file you'll modify with a brief description
            - Then provide the full content of each modified file
            
            Begin by analyzing the task and planning your implementation.
            EOF

        - name: Run Goose Session
          shell: bash
          run: |
            # Run Goose with the instructions file
            goose run --instructions instructions.txt > goose_output.txt
            
            # Extract the implementation details
            cat goose_output.txt | grep -v "starting session" | grep -v "logging to" > implementation_details.md
            
            # Extract code blocks from the output
            csplit -z implementation_details.md '/```/' '{*}' 2>/dev/null || echo "No code blocks found"
            
            # Directory to store extracted file contents
            mkdir -p extracted_files
            
            # Process each file between code blocks
            if ls xx* &>/dev/null; then
              for file in xx*; do
                if grep -q "^```" "$file"; then
                  # Get the filename from the first line after the code block marker
                  FILENAME=$(grep -A 1 "^```" "$file" | tail -1 | tr -d " " | tr -d ":" | tr -d "\`" | grep -v "^\$")
                  if [[ -n "$FILENAME" && "$FILENAME" != "bash" && "$FILENAME" != "javascript" && "$FILENAME" != "typescript" && "$FILENAME" != "jsx" && "$FILENAME" != "tsx" && "$FILENAME" != "json" && "$FILENAME" != "css" && "$FILENAME" != "html" ]]; then
                    # Extract content between triple backticks
                    sed -n '/^```/,/^```/ { /^```/! { /^```/! p } }' "$file" > "extracted_files/$FILENAME"
                    echo "Extracted content for $FILENAME"
                  fi
                fi
              done
            fi

        - name: Create branch, commit changes and create PR
          shell: bash
          run: |
            # Generate a slug from the issue title for the branch name
            SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')
            BRANCH_NAME="goose-ai/$SLUG-$(date +%s)"
            
            # Configure git
            git config user.name "goose"
            git config user.email "goose-ai@block.xyz"
            
            # Create and checkout a new branch
            git checkout -b $BRANCH_NAME
            
            # Copy the extracted files to their proper locations
            if [ -d "extracted_files" ] && [ "$(ls -A extracted_files)" ]; then
              for file in extracted_files/*; do
                filename=$(basename "$file")
                mkdir -p "$(dirname "$filename")"
                cp "$file" "$filename"
                echo "Copied $filename"
              done
            else
              # If no files were extracted, create a placeholder analysis file
              echo "# Analysis for '${{ github.event.issue.title }}'" > goose_analysis.md
              echo "" >> goose_analysis.md
              echo "## Implementation Details" >> goose_analysis.md
              echo "" >> goose_analysis.md
              cat implementation_details.md >> goose_analysis.md
            fi
            
            # Add all changes
            git add .
            
            # Check if there are changes to commit
            if [[ -n $(git status --porcelain) ]]; then
              # Commit the changes
              git commit -m "Implement: ${{ github.event.issue.title }}" -m "Resolves #${{ github.event.issue.number }}"
              
              # Push the branch
              git push origin $BRANCH_NAME
              
              # Get list of changed files for PR description
              CHANGES=$(git diff --name-status HEAD~1 HEAD | awk '{print "- " $1 " " $2}')
              
              # Create a pull request
              gh pr create --head $BRANCH_NAME \
                --title "[${{ github.event.issue.number }}] ${{ github.event.issue.title }}" \
                --body "This PR resolves #${{ github.event.issue.number }}

                ## Implementation Details
                $(cat implementation_details.md | head -n 500)

                ## Files Changed
                $CHANGES"
              
              # Comment on the issue
              PR_NUMBER=$(gh pr list --head $BRANCH_NAME --json number -q '.[0].number')
              gh issue comment ${{ github.event.issue.number }} --body "I've implemented this feature in PR #$PR_NUMBER. You can review the changes there."
            else
              echo "No changes to commit."
            fi