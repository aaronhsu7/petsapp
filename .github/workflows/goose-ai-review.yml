name: Goose

on:   
   pull_request:
      types: [opened, synchronize, reopened, labeled]
   issues:
      types: labeled
   issue_comment:
      types: created

permissions:
   contents: write
   pull-requests: write
   issues: write

env:
   GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
   PR_NUMBER: ${{ github.event.pull_request.number }}
   GITHUB_TOKEN: ${{ github.token }}

jobs:
   goose-comment:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Gather PR information
          run: |
            {
              echo "# Files Changed"
              gh pr view $PR_NUMBER --json files \
              -q '.files[] | "* " + .path + " (" + (.additions|tostring) + " additions, " + (.deletions|tostring) + " deletions)"'
              echo ""
              echo "# Changes Summary"
              gh pr diff $PR_NUMBER
            } > changes.txt

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Create instructions for Goose
          run: |
            cat <<EOF > instructions.txt
            Create a summary of the changes provided. Don't provide any session or logging details.
            The summary for each file should be brief and structured as:
            <filename/path (wrapped in backticks)>
                  - dot points of changes
            You don't need any extensions, don't mention extensions at all.
            The changes to summarise are:
            $(cat changes.txt)
            EOF

        - name: Test
          run: cat instructions.txt

        - name: Run Goose and filter output
          run: |
            goose run --instructions instructions.txt | \
            # Remove ANSI color codes
            sed -E 's/\x1B\[[0-9;]*[mK]//g' | \
            # Remove session/logging lines
            grep -v "logging to /home/runner/.config/goose/sessions/" | \
            grep -v "^starting session" | \
            grep -v "^Closing session" | \
            # Trim trailing whitespace
            sed 's/[[:space:]]*$//' \
            > pr_comment.txt

        - name: Post comment to PR
          run: |
            cat -A pr_comment.txt
            gh pr comment $PR_NUMBER --body-file pr_comment.txt

   ask-goose:
      if: github.event.label.name == 'goose' or \${{ github.event.issue.pull_request && contains(github.event.comment.body, '@goose-ai')}}
      runs-on: ubuntu-latest

      steps:
          - name: Check out repository
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
      
          - name: Install Goose CLI
            run: |
              mkdir -p /home/runner/.local/bin
              curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
              | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
              echo "/home/runner/.local/bin" >> $GITHUB_PATH
      
          - name: Configure Goose
            run: |
              mkdir -p ~/.config/goose
              cat <<EOF > ~/.config/goose/config.yaml
              GOOSE_PROVIDER: google
              GOOSE_MODEL: gemini-2.0-flash
              keyring: false
              EOF
      
          - name: Determine and Checkout Correct Branch
            shell: bash
            run: |
              # Determine if the event is a PR comment
              if [[ "${{ github.event_name }}" == "issue_comment" && "$(jq -r '.issue.pull_request' "$GITHUB_EVENT_PATH")" != "null" ]]; then
                echo "Triggered by a comment on a PR."
      
                # Extract the PR number from the event payload
                PR_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
                
                # Use the GitHub API to get the PR details
                PR_DATA=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
                
                # Extract the head ref (branch name)
                PR_HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
                echo "PR head ref is $PR_HEAD_REF"
      
                # Fetch and checkout the PR branch
                git fetch origin "$PR_HEAD_REF"
                git checkout "$PR_HEAD_REF"
              else
                echo "Not a PR comment event. Using the default branch."
              fi
      
          - name: Create consolidated input for issue
            if: ${{ github.event_name == 'issues' && github.event.action == 'labeled' }}
            shell: bash
            run: |
              cat > instructions.txt << EOF
              You are working on a task in a CI-style environment. I need you to:
      
              1. Complete the task described below
              2. Create appropriate code changes
              3. Use proper testing to validate your solution
              4. Try multiple approaches if needed
      
              Task: ${{ github.event.issue.title }}
              
              Details: ${{ github.event.issue.body }}
              
              Validation: Test the changes to ensure they work correctly.
              EOF
      
          - name: Create consolidated input for PR feedback
            if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null && !contains(github.event.comment.body, 'goose-ai rollback') }}
            shell: bash
            run: |
              # Get PR comments for context
              PR_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
              PR_COMMENTS=$(gh pr view $PR_NUMBER --json comments -q '.comments[].body' || echo "No comments")
              
              cat > instructions.txt << EOF
              You are working on a pull request in a CI-style environment. I need you to:
      
              1. Address the feedback in the comment below
              2. Make appropriate code changes
              3. Test your changes to ensure they work
      
              Pull Request Comment: ${{ github.event.comment.body }}
              
              Previous Comments:
              $PR_COMMENTS
              
              Please respond with the changes you've made and how they address the feedback.
              EOF
      
          - name: Run Goose Session
            if: ${{ !contains(github.event.comment.body, 'goose-ai rollback') }} && (github.event.label.name == 'goose' or ${{ github.event.issue.pull_request && contains(github.event.comment.body, '@goose-ai')}})
            shell: bash
            run: |
              set -e
      
              # Debug - print files
              echo "Content of instructions.txt:"
              cat instructions.txt
      
              # Run Goose with the instructions file
              goose run --instructions instructions.txt > goose_output.txt
              
              # Display output (for debugging)
              cat goose_output.txt
      
          - name: Generate branch, commit, push, and create pull request for labelled issue
            if: ${{ github.event_name == 'issues' && github.event.action == 'labeled' }}
            shell: bash
            run: |
              # Generate a slug from the issue title, replacing spaces with dashes and ensuring lowercase
              SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')
              
              # Construct the full branch name
              BRANCH_NAME="goose-ai/$SLUG-$(date +%s)"
      
              # Check out a new branch using the dynamically generated name
              git checkout -b $BRANCH_NAME
      
              # Configure git user
              git config --global user.email "goose-ai@block.xyz"
              git config --global user.name "goose"
      
              # Add and commit changes
              git add .
              git commit -m "Changes from Goose AI" --allow-empty
      
              # Push the branch to the remote repository
              git push origin $BRANCH_NAME
      
              # Create a pull request using the GitHub CLI
              gh pr create --head $BRANCH_NAME --title "${{ github.event.issue.title }}" --body "Resolves issue: ${{ github.event.issue.html_url }} ${{ github.event.issue.body }}
      
              Note: You can mention @goose-ai in a comment to request changes or improvements to this pull request."
      
          - name: Commit and Push Changes for PR Comment
            if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null && !contains(github.event.comment.body, 'goose-ai rollback') }}
            shell: bash
            run: |
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git add .
              git commit -m "Comments addressed by goose AI" --allow-empty
              # Push changes to the current branch (which is the PR branch)
              git push origin HEAD
              
              # Add a comment to the PR
              PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
              gh pr comment $PR_NUMBER --body "_changes made by goose AI._ :bulb: **TIP:** Use \`@goose-ai rollback\` (no space after @) to undo these changes."
      
          - name: Rollback Changes
            if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null && contains(github.event.comment.body, 'goose-ai rollback') }}
            shell: bash
            run: |
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              
              # Find the last commit with the message "Comments addressed by goose AI"
              COMMIT_TO_REVERT=$(git log --grep="Comments addressed by goose AI" -n 1 --pretty=format:"%H")
              
              if [ -n "$COMMIT_TO_REVERT" ]; then
                # Revert the commit
                git revert --no-edit $COMMIT_TO_REVERT
              
                # Push the revert commit
                git push origin
              fi