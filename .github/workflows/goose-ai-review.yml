name: Goose

on:   
   pull_request:
      types: [opened, synchronize, reopened, labeled]
   issues:
      types: labeled
   issue_comment:
      types: created

permissions:
   contents: write
   pull-requests: write
   issues: write

env:
   GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
   PR_NUMBER: ${{ github.event.pull_request.number }}
   GITHUB_TOKEN: ${{ github.token }}

jobs:
   goose-comment:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Gather PR information
          run: |
            {
              echo "# Files Changed"
              gh pr view $PR_NUMBER --json files \
              -q '.files[] | "* " + .path + " (" + (.additions|tostring) + " additions, " + (.deletions|tostring) + " deletions)"'
              echo ""
              echo "# Changes Summary"
              gh pr diff $PR_NUMBER
            } > changes.txt

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Create instructions for Goose
          run: |
            cat <<EOF > instructions.txt
            Create a summary of the changes provided. Don't provide any session or logging details.
            The summary for each file should be brief and structured as:
            <filename/path (wrapped in backticks)>
                  - dot points of changes
            You don't need any extensions, don't mention extensions at all.
            The changes to summarise are:
            $(cat changes.txt)
            EOF

        - name: Test
          run: cat instructions.txt

        - name: Run Goose and filter output
          run: |
            goose run --instructions instructions.txt | \
            # Remove ANSI color codes
            sed -E 's/\x1B\[[0-9;]*[mK]//g' | \
            # Remove session/logging lines
            grep -v "logging to /home/runner/.config/goose/sessions/" | \
            grep -v "^starting session" | \
            grep -v "^Closing session" | \
            # Trim trailing whitespace
            sed 's/[[:space:]]*$//' \
            > pr_comment.txt

        - name: Post comment to PR
          run: |
            cat -A pr_comment.txt
            gh pr comment $PR_NUMBER --body-file pr_comment.txt

   ask-goose:
      if: github.event.label.name == 'goose'
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Install GitHub CLI
          run: |
            sudo apt-get update
            sudo apt-get install -y gh

        - name: Configure Git
          run: |
            git config --global user.name "goose-ai-bot"
            git config --global user.email "goose-ai-bot@example.com"

        - name: Create branch and implement changes
          env:
            GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          run: |
            # Set issue details
            ISSUE_TITLE="\${{ github.event.issue.title }}"
            ISSUE_BODY="\${{ github.event.issue.body }}"
            ISSUE_NUMBER="\${{ github.event.issue.number }}"
            REPO="\${{ github.repository }}"
            REPO_OWNER="\${{ github.repository_owner }}"
            REPO_NAME="\${{ github.event.repository.name }}"
            BASE_BRANCH="\${{ github.event.repository.default_branch }}"
            
            # Create a branch name
            SLUG=\$(echo "\$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')
            BRANCH_NAME="goose-ai/\$SLUG-\$(date +%s)"
            
            # Create and checkout the branch
            git checkout -b "\$BRANCH_NAME"
            
            # Install Goose CLI
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> \$GITHUB_PATH
            
            # Configure Goose
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF
            
            # Create instructions file
            cat > instructions.txt << EOF
            # Development Task: \$ISSUE_TITLE

            ## Task Description
            \$ISSUE_BODY
            
            ## Your Task
            You need to implement the feature described in the issue by modifying or creating files in this repository.
            
            ## Repository Structure
            \$(find . -type f -not -path "*/\\.*" -not -path "*/node_modules/*" | sort)
            
            ## Implementation Process
            1. Analyze the repository structure to understand the codebase
            2. For each file you want to modify, output the EXACT file path followed by the complete file content
            3. Follow this precise format for file changes:
            
            FILE_PATH: path/to/file.js
            \`\`\`
            Complete file content goes here
            \`\`\`
            
            4. After listing all file changes, provide a brief summary of your implementation
            
            Remember: Use the exact format for file paths and content to ensure automated processing.
            EOF
            
            # Run Goose to generate implementation details
            /home/runner/.local/bin/goose run --instructions instructions.txt > colored_output.txt
            
            # Remove ANSI color codes from output
            sed 's/\x1b$$[0-9;]*m//g' colored_output.txt > goose_output.txt
            
            # Create a directory for file extraction
            mkdir -p extracted_files
            
            # Process the output to extract file paths and content using a more robust approach
            echo "Processing Goose output..."
            
            # Create a Python script to extract files
            cat > extract_files.py << 'EOF'
            import re
            import os
            import sys
            
            def extract_files(input_file):
                with open(input_file, 'r') as f:
                    content = f.read()
                
                # Extract file paths and content between triple backticks
                file_pattern = r"FILE_PATH:\s*(.*?)\n```(?:[a-z]*)?\n(.*?)```"
                matches = re.findall(file_pattern, content, re.DOTALL)
                
                files_created = []
                
                for file_path, file_content in matches:
                    file_path = file_path.strip()
                    print(f"Found file: {file_path}")
                    
                    # Create directory if it doesn't exist
                    dir_name = os.path.dirname(file_path)
                    if dir_name:
                        os.makedirs(dir_name, exist_ok=True)
                    
                    # Write the content to the file
                    with open(file_path, 'w') as f:
                        f.write(file_content)
                    
                    files_created.append(file_path)
                    print(f"Created/Updated: {file_path}")
                
                return files_created
            
            if __name__ == "__main__":
                if len(sys.argv) > 1:
                    files = extract_files(sys.argv[1])
                    print(f"Total files created/updated: {len(files)}")
                    if not files:
                        print("No files were extracted. Check the format of the Goose output.")
                else:
                    print("Please provide the path to the Goose output file")
            EOF
            
            # Run the extraction script
            python3 extract_files.py goose_output.txt
            
            # Add all changes to git
            git add .
            
            # Check if there are any changes to commit
            if [ -n "\$(git status --porcelain)" ]; then
              # Commit changes
              git commit -m "Implement: \$ISSUE_TITLE" -m "Resolves #\$ISSUE_NUMBER"
              
              # Push changes
              git push origin "\$BRANCH_NAME"
              
              # Create a pull request using GitHub CLI
              PR_URL=\$(gh pr create \
                --repo "\$REPO" \
                --base "\$BASE_BRANCH" \
                --head "\$BRANCH_NAME" \
                --title "[\$ISSUE_NUMBER] \$ISSUE_TITLE" \
                --body "This PR implements the feature requested in issue #\$ISSUE_NUMBER. 

            ## Implementation Details
            \$(grep -v "FILE_PATH:" goose_output.txt | grep -v '```' | grep -v "starting session" | head -n 50)
            ")
              
              # Comment on the issue with link to PR
              gh issue comment "\$ISSUE_NUMBER" --repo "\$REPO" \
                --body "I've implemented this feature and created a pull request: \$PR_URL

            ## Implementation Summary
            \$(grep -v "FILE_PATH:" goose_output.txt | grep -v '```' | grep -v "starting session" | head -n 50)
            "
              
              echo "Pull request created: \$PR_URL"
            else
              echo "No changes made to commit"
              
              # Comment on the issue that no changes were needed
              gh issue comment "\$ISSUE_NUMBER" --repo "\$REPO" \
                --body "I analyzed this issue but didn't make any code changes. The feature may already exist or might require more information to implement."
            fi