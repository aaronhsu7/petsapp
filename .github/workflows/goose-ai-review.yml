name: Goose

on:   
   pull_request:
      types: [opened, synchronize, reopened, labeled]
   issues:
      types: labeled
   issue_comment:
      types: created

permissions:
   contents: write
   pull-requests: write
   issues: write

env:
   GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
   PR_NUMBER: ${{ github.event.pull_request.number }}
   GITHUB_TOKEN: ${{ github.token }}

jobs:
   goose-comment:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Gather PR information
          run: |
            {
              echo "# Files Changed"
              gh pr view $PR_NUMBER --json files \
              -q '.files[] | "* " + .path + " (" + (.additions|tostring) + " additions, " + (.deletions|tostring) + " deletions)"'
              echo ""
              echo "# Changes Summary"
              gh pr diff $PR_NUMBER
            } > changes.txt

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Create instructions for Goose
          run: |
            cat <<EOF > instructions.txt
            Create a summary of the changes provided. Don't provide any session or logging details.
            The summary for each file should be brief and structured as:
            <filename/path (wrapped in backticks)>
                  - dot points of changes
            You don't need any extensions, don't mention extensions at all.
            The changes to summarise are:
            $(cat changes.txt)
            EOF

        - name: Test
          run: cat instructions.txt

        - name: Run Goose and filter output
          run: |
            goose run --instructions instructions.txt | \
            # Remove ANSI color codes
            sed -E 's/\x1B\[[0-9;]*[mK]//g' | \
            # Remove session/logging lines
            grep -v "logging to /home/runner/.config/goose/sessions/" | \
            grep -v "^starting session" | \
            grep -v "^Closing session" | \
            # Trim trailing whitespace
            sed 's/[[:space:]]*$//' \
            > pr_comment.txt

        - name: Post comment to PR
          run: |
            cat -A pr_comment.txt
            gh pr comment $PR_NUMBER --body-file pr_comment.txt

   ask-goose:
        if: github.event.label.name == 'goose' || (github.event.issue.pull_request && contains(github.event.comment.body, '@goose-ai'))
        runs-on: ubuntu-latest

        steps:
          - name: Check out repository
            uses: actions/checkout@v4
            with:
              fetch-depth: 0

          - name: Install Goose CLI
            run: |
              mkdir -p /home/runner/.local/bin
              curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
              | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
              echo "/home/runner/.local/bin" >> $GITHUB_PATH

          - name: Configure Goose
            run: |
              mkdir -p ~/.config/goose
              cat <<EOF > ~/.config/goose/config.yaml
              GOOSE_PROVIDER: google
              GOOSE_MODEL: gemini-2.0-flash
              keyring: false
              EOF

          - name: Install necessary tools
            run: |
              sudo apt-get update
              sudo apt-get install -y jq curl git

          - name: Create goose-bash-helper utility
            run: |
              # Create a bash helper script that Goose can use to interact with the filesystem
              cat > goose-bash-helper.sh << 'EOF'
              #!/bin/bash
              # Helper script for Goose to interact with files

              # Function to list files in a directory
              function list_files() {
                local dir="${1:-.}"
                find "$dir" -type f -not -path "*/node_modules/*" -not -path "*/\.*" | sort
              }

              # Function to list directories
              function list_dirs() {
                local dir="${1:-.}"
                find "$dir" -type d -not -path "*/node_modules/*" -not -path "*/\.*" | sort
              }

              # Function to read file content
              function read_file() {
                local file="$1"
                if [[ -f "$file" ]]; then
                  cat "$file"
                else
                  echo "File not found: $file"
                  return 1
                fi
              }

              # Function to write to a file
              function write_file() {
                local file="$1"
                local content="${@:2}"
                echo "$content" > "$file"
              }

              # Function to append to a file
              function append_file() {
                local file="$1"
                local content="${@:2}"
                echo "$content" >> "$file"
              }

              # Function to create a directory
              function create_dir() {
                local dir="$1"
                mkdir -p "$dir"
              }

              # Execute the requested function
              "$@"
              EOF

              chmod +x goose-bash-helper.sh

          - name: Determine and Checkout Correct Branch
            shell: bash
            run: |
              # Determine if the event is a PR comment
              if [[ "${{ github.event_name }}" == "issue_comment" && "$(jq -r '.issue.pull_request' "$GITHUB_EVENT_PATH")" != "null" ]]; then
                echo "Triggered by a comment on a PR."

                # Extract the PR number from the event payload
                PR_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")

                # Use the GitHub API to get the PR details
                PR_DATA=$(curl -s -H "Authorization: token ${{ github.token }}" \
                            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")

                # Extract the head ref (branch name)
                PR_HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
                echo "PR head ref is $PR_HEAD_REF"

                # Fetch and checkout the PR branch
                git fetch origin "$PR_HEAD_REF"
                git checkout "$PR_HEAD_REF"
              else
                echo "Not a PR comment event. Using the default branch."
              fi

          - name: Create consolidated input for issue
            if: ${{ github.event_name == 'issues' && github.event.action == 'labeled' }}
            shell: bash
            run: |
              # Generate a slug from the issue title
              SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')

              # Construct the branch name
              BRANCH_NAME="goose-ai/$SLUG-$(date +%s)"
              echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

              # Create repo structure information for context
              echo "Analyzing repository structure..."
              find . -type f -not -path "*/\.*" -not -path "*/node_modules/*" | sort > repo_files.txt

              cat > instructions.txt << EOF
              # Development Task: ${{ github.event.issue.title }}

              You are a development assistant that will implement the requested feature from this issue.

              ## Task Description

              ${{ github.event.issue.body }}

              ## Your Tools

              I've provided a bash helper script that you can use to explore and modify the codebase:

              - To list files: ./goose-bash-helper.sh list_files [directory]
              - To list directories: ./goose-bash-helper.sh list_dirs [directory]
              - To read a file: ./goose-bash-helper.sh read_file path/to/file
              - To write to a file: ./goose-bash-helper.sh write_file path/to/file "content"
              - To append to a file: ./goose-bash-helper.sh append_file path/to/file "content"
              - To create a directory: ./goose-bash-helper.sh create_dir path/to/dir

              ## Work Process

              1. First, explore the repository structure to understand the codebase
              2. Identify which files need to be modified or created
              3. Implement the necessary changes to fulfill the requirements
              4. Describe your implementation approach and changes made

              Begin by exploring the repository structure to understand the codebase.
              EOF

          - name: Create consolidated input for PR feedback
            if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null && !contains(github.event.comment.body, 'goose-ai rollback') }}
            shell: bash
            run: |
              # Get PR comments for context
              PR_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
              PR_COMMENTS=$(gh pr view $PR_NUMBER --json comments -q '.comments[].body' || echo "No comments")

              cat > instructions.txt << EOF
              You are working on a pull request in a CI-style environment. I need you to:

              1. Address the feedback in the comment below
              2. Make appropriate code changes
              3. Test your changes to ensure they work

              Pull Request Comment: ${{ github.event.comment.body }}

              Previous Comments:
              $PR_COMMENTS

              Please respond with the changes you've made and how they address the feedback.

              ## Your Tools

              I've provided a bash helper script that you can use to explore and modify the codebase:

              - To list files: ./goose-bash-helper.sh list_files [directory]
              - To list directories: ./goose-bash-helper.sh list_dirs [directory]
              - To read a file: ./goose-bash-helper.sh read_file path/to/file
              - To write to a file: ./goose-bash-helper.sh write_file path/to/file "content"
              - To append to a file: ./goose-bash-helper.sh append_file path/to/file "content"
              - To create a directory: ./goose-bash-helper.sh create_dir path/to/dir

              Begin by exploring the files mentioned in the PR feedback.
              EOF

          - name: Run Goose Session
            if: \${{ !contains(github.event.comment.body, 'goose-ai rollback') && (github.event.label.name == 'goose' || (github.event.issue.pull_request && contains(github.event.comment.body, '@goose-ai'))) }}
            shell: bash
            run: |
                  set -e
                  
                  # Generate repository structure info directly
                  echo "Generating repository structure info..."
                  echo -e "\n\n## Repository Structure\n" >> instructions.txt
                  echo "### Files:" >> instructions.txt
                  find . -type f -not -path "*/\.*" -not -path "*/node_modules/*" | sort >> instructions.txt
                  
                  echo -e "\n### Directories:" >> instructions.txt
                  find . -type d -not -path "*/\.*" -not -path "*/node_modules/*" -maxdepth 3 | sort >> instructions.txt
                  
                  # For key frontend files, add content to instructions
                  echo -e "\n\n## Key Files Content\n" >> instructions.txt
                  
                  # Find potential frontend files related to the feature - fixed syntax
                  echo "Adding key frontend files to instructions..."
                  for file in \$(find . -type f $ -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.html" $ -not -path "*/node_modules/*" -not -path "*/\.*" | grep -i -E 'pet|animal|front|ui|component|page' 2>/dev/null | head -5 || echo ""); do
                        if [ -n "\$file" ]; then
                        echo -e "\n### File: \$file\n" >> instructions.txt
                        echo '```' >> instructions.txt
                        cat "\$file" >> instructions.txt
                        echo '```' >> instructions.txt
                        fi
                  done
                  
                  # Add API files if they exist
                  echo "Adding API files to instructions..."
                  for file in \$(find . -type f -name "*.js" -not -path "*/node_modules/*" -not -path "*/\.*" | grep -i -E 'api|service|fetch|axios|request' 2>/dev/null | head -3 || echo ""); do
                        if [ -n "\$file" ]; then
                        echo -e "\n### API File: \$file\n" >> instructions.txt
                        echo '```' >> instructions.txt
                        cat "\$file" >> instructions.txt
                        echo '```' >> instructions.txt
                        fi
                  done
                  
                  # Add main App or Index files - fixed syntax
                  echo "Adding main application files to instructions..."
                  for file in \$(find . -type f $ -name "*App*" -o -name "index.*" $ -not -path "*/node_modules/*" -not -path "*/\.*" 2>/dev/null | head -3 || echo ""); do
                        if [ -n "\$file" ]; then
                        echo -e "\n### Main App File: \$file\n" >> instructions.txt
                        echo '```' >> instructions.txt
                        cat "\$file" >> instructions.txt
                        echo '```' >> instructions.txt
                        fi
                  done
                  
                  # Add package.json to understand dependencies
                  if [ -f "package.json" ]; then
                        echo -e "\n### package.json\n" >> instructions.txt
                        echo '```json' >> instructions.txt
                        cat package.json >> instructions.txt
                        echo '```' >> instructions.txt
                  fi
                  
                  # Add any component directories - useful for understanding structure
                  echo "Adding component directories..."
                  if [ -d "src/components" ]; then
                        echo -e "\n### Component Directory Structure:\n" >> instructions.txt
                        find ./src/components -type f -name "*.js*" -o -name "*.ts*" | sort >> instructions.txt
                  fi
                  
                  # Add implementation instructions
                  echo -e "\n\n## Implementation Instructions\n" >> instructions.txt
                  echo "Based on the codebase structure and files provided above, implement the search functionality with the following requirements:" >> instructions.txt
                  echo "1. Add a search component with input field and filters for breed, age, and location" >> instructions.txt
                  echo "2. Connect to the existing API to fetch filtered results" >> instructions.txt
                  echo "3. Display search results in a clear, user-friendly manner" >> instructions.txt
                  echo "4. Add proper error handling for failed API requests or no results" >> instructions.txt
                  echo "5. Ensure the UI is responsive and matches the existing design patterns" >> instructions.txt
                  echo "6. Describe all files you've modified or created and why" >> instructions.txt
                  echo "7. Provide the full content of each new or modified file" >> instructions.txt
                  
                  # Debug - print first part of instructions
                  echo "Content of enhanced instructions.txt (first few lines):"
                  head -n 20 instructions.txt
                  
                  # Run Goose with the enhanced instructions file
                  echo "Running Goose with enhanced instructions..."
                  goose run --instructions instructions.txt > goose_output.txt
                  
                  # Display output (for debugging)
                  echo "Goose output (last 30 lines):"
                  tail -n 30 goose_output.txt
                  
                  # Save implementation details (excluding session info)
                  grep -v "starting session" goose_output.txt | grep -v "logging to" > implementation_details.md

          - name: Generate branch, commit, push, and create pull request for labelled issue
            if: ${{ github.event_name == 'issues' && github.event.action == 'labeled' }}
            shell: bash
            run: |
              # Generate a slug from the issue title, replacing spaces with dashes and ensuring lowercase
              SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')

              # Construct the full branch name
              BRANCH_NAME="goose-ai/$SLUG-$(date +%s)"

              # Check out a new branch using the dynamically generated name
              git checkout -b $BRANCH_NAME

              # Configure git user
              git config --global user.email "goose-ai@block.xyz"
              git config --global user.name "goose"

              # Check if there are any changes to commit
              if [[ -n $(git status --porcelain) ]]; then
                # Add all changes
                git add .

                # Create commit
                git commit -m "Implement: ${{ github.event.issue.title }}" -m "Resolves #${{ github.event.issue.number }}"

                # Get summary of changes
                CHANGES=$(git diff --name-status HEAD~1 HEAD | awk '{print "- " $1 " " $2}')
              else
                # No changes were made, create a placeholder file
                echo "# Analysis for '${{ github.event.issue.title }}'" > goose_analysis.md
                echo "" >> goose_analysis.md
                echo "## Issue Analysis" >> goose_analysis.md
                echo "" >> goose_analysis.md
                cat implementation_details.md >> goose_analysis.md

                # Add and commit the analysis file
                git add goose_analysis.md
                git commit -m "Analysis: ${{ github.event.issue.title }}" -m "Analysis for #${{ github.event.issue.number }}"

                # Get summary of changes
                CHANGES="- A goose_analysis.md (Analysis document)"
              fi

              # Push the branch to the remote repository
              git push origin $BRANCH_NAME

              # Create a pull request using the GitHub CLI
              gh pr create --head $BRANCH_NAME --title "[${{ github.event.issue.number }}] ${{ github.event.issue.title }}" --body "This PR resolves #${{ github.event.issue.number }}

              ## Implementation Details
              $(cat implementation_details.md | tail -n 50)

              ## Files Changed
              $CHANGES

              Note: You can mention @goose-ai in a comment to request changes or improvements to this pull request."

              # Comment on the issue that work has been completed
              gh issue comment ${{ github.event.issue.number }} --body "I've implemented this feature in PR #$(gh pr list --head $BRANCH_NAME --json number -q '.[0].number'). You can review the changes there.

              ## Implementation Summary
              $(cat implementation_details.md | grep -A 10 'Implementation Summary' || head -n 10 implementation_details.md)"
              
          - name: Commit and Push Changes for PR Comment
            if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null && !contains(github.event.comment.body, 'goose-ai rollback') }}
            shell: bash
            run: |
              # Check if there are any changes to commit
              if [[ -n $(git status --porcelain) ]]; then
                git config user.name "github-actions[bot]"
                git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
                git add .
                git commit -m "Comments addressed by goose AI"
                # Push changes to the current branch (which is the PR branch)
                git push origin HEAD

                # Add a comment to the PR with implementation details
                PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
                gh pr comment $PR_NUMBER --body "_changes made by goose AI:_

                $(cat implementation_details.md | tail -n 30)

                :bulb: **TIP:** Use \`@goose-ai rollback\` (no space after @) to undo these changes."
              else
                # No changes were made
                PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
                gh pr comment $PR_NUMBER --body "_Goose AI analyzed the feedback but didn't make changes:_

                $(cat implementation_details.md | tail -n 30)

                Please provide more specific guidance if you need code changes."
              fi

          - name: Rollback Changes
            if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null && contains(github.event.comment.body, 'goose-ai rollback') }}
            shell: bash
            run: |
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

              # Find the last commit with the message "Comments addressed by goose AI"
              COMMIT_TO_REVERT=$(git log --grep="Comments addressed by goose AI" -n 1 --pretty=format:"%H")

              if [ -n "$COMMIT_TO_REVERT" ]; then
                # Revert the commit
                git revert --no-edit $COMMIT_TO_REVERT

                # Push the revert commit
                git push origin HEAD

                # Add a comment to the PR
                PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
                gh pr comment $PR_NUMBER --body "✅ Successfully reverted the last goose AI changes."
              else
                PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
                gh pr comment $PR_NUMBER --body "⚠️ No recent goose AI changes found to revert."
              fi
