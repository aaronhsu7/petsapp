name: Goose

on:   
   pull_request:
      types: [opened, synchronize, reopened, labeled]
   issues:
      types: labeled
   issue_comment:
      types: created

permissions:
   contents: write
   pull-requests: write
   issues: write

env:
   GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
   PR_NUMBER: ${{ github.event.pull_request.number }}
   GITHUB_TOKEN: ${{ github.token }}

jobs:
   goose-comment:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Gather PR information
          run: |
            {
              echo "# Files Changed"
              gh pr view $PR_NUMBER --json files \
              -q '.files[] | "* " + .path + " (" + (.additions|tostring) + " additions, " + (.deletions|tostring) + " deletions)"'
              echo ""
              echo "# Changes Summary"
              gh pr diff $PR_NUMBER
            } > changes.txt

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Create instructions for Goose
          run: |
            cat <<EOF > instructions.txt
            Create a summary of the changes provided. Don't provide any session or logging details.
            The summary for each file should be brief and structured as:
            <filename/path (wrapped in backticks)>
                  - dot points of changes
            You don't need any extensions, don't mention extensions at all.
            The changes to summarise are:
            $(cat changes.txt)
            EOF

        - name: Test
          run: cat instructions.txt

        - name: Run Goose and filter output
          run: |
            goose run --instructions instructions.txt | \
            # Remove ANSI color codes
            sed -E 's/\x1B\[[0-9;]*[mK]//g' | \
            # Remove session/logging lines
            grep -v "logging to /home/runner/.config/goose/sessions/" | \
            grep -v "^starting session" | \
            grep -v "^Closing session" | \
            # Trim trailing whitespace
            sed 's/[[:space:]]*$//' \
            > pr_comment.txt

        - name: Post comment to PR
          run: |
            cat -A pr_comment.txt
            gh pr comment $PR_NUMBER --body-file pr_comment.txt

   ask-goose:
      if: github.event.label.name == 'goose' || (github.event.issue.pull_request && contains(github.event.comment.body, '@goose-ai'))
      runs-on: ubuntu-latest

      steps:
        - name: Check out repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Install Goose CLI
          run: |
            mkdir -p /home/runner/.local/bin
            curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

        - name: Configure Goose
          run: |
            mkdir -p ~/.config/goose
            cat <<EOF > ~/.config/goose/config.yaml
            GOOSE_PROVIDER: google
            GOOSE_MODEL: gemini-2.0-flash
            keyring: false
            EOF

        - name: Setup GitHub Extension for Goose
          run: |
            npm install -g @modelcontextprotocol/server-github

            # Configure the GitHub extension
            mkdir -p ~/.config/goose/extensions
            cat > ~/.config/goose/extensions/github.yaml << EOF
            type: command
            command: npx -y @modelcontextprotocol/server-github
            timeout: 300
            envvars:
              GITHUB_TOKEN: ${{ github.token }}
            EOF

        - name: Create instructions file
          if: github.event_name == 'issues' && github.event.action == 'labeled'
          shell: bash
          run: |
            # Generate a slug from the issue title
            SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')

            cat > instructions.txt << EOF
            # Development Task: ${{ github.event.issue.title }}

            ## Task Description
            ${{ github.event.issue.body }}

            ## Your Mission
            You are an AI assistant that will implement the task described in the issue.
            
            You need to:
            1. Create a new branch based on the issue title
            2. Modify or create the necessary files to implement the requested functionality
            3. Commit your changes
            4. Create a pull request

            ## Repository Information
            Owner: ${{ github.repository_owner }}
            Repository: ${{ github.event.repository.name }}
            Base Branch: ${{ github.event.repository.default_branch }}
            
            ## Instructions
            1. First, analyze the task to understand what needs to be implemented
            2. Create a new branch with a descriptive name based on the issue 
            3. Use the GitHub extension to read relevant files to understand the codebase structure
            4. Modify or create files as needed to implement the requested functionality
            5. Create a pull request with your changes, referencing the original issue #${{ github.event.issue.number }}

            Begin by creating a new branch and exploring the repository structure.
            EOF

        - name: Run Goose Session
          env:
            GITHUB_TOKEN: ${{ github.token }}
          shell: bash
          run: |
            # Run Goose with the instructions file
            goose run --instructions instructions.txt > goose_output.txt
            
            # Extract the implementation details
            cat goose_output.txt > implementation_details.md
            
            # Comment on the issue with a summary
            if grep -q "pull request" implementation_details.md; then
              PR_URL=$(grep -o 'https://github.com/[^ ]*pull/[0-9]*' implementation_details.md || echo "PR created")
              # Create the comment using GitHub CLI
              gh issue comment ${{ github.event.issue.number }} --repo ${{ github.repository }} --body "I've implemented this feature and created a pull request: $PR_URL

            ## Implementation Summary
            $(cat implementation_details.md | grep -v "starting session" | grep -v "logging to" | tail -n 30)"
            else
              gh issue comment ${{ github.event.issue.number }} --repo ${{ github.repository }} --body "I attempted to implement this feature, but encountered some issues. Please check the workflow logs for details.

            ## Output
            $(cat implementation_details.md | grep -v "starting session" | grep -v "logging to" | tail -n 30)"
            fi

        - name: Handle PR Comment
          if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null }}
          env:
            GITHUB_TOKEN: ${{ github.token }}
          shell: bash
          run: |
            # Extract PR number from the event
            PR_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
            
            # Create instructions for PR comment
            cat > pr_instructions.txt << EOF
            # PR Feedback Task

            ## PR Comment
            ${{ github.event.comment.body }}

            ## Your Mission
            You are an AI assistant that will address the feedback in the PR comment.
            
            ## Repository Information
            Owner: ${{ github.repository_owner }}
            Repository: ${{ github.event.repository.name }}
            PR Number: ${PR_NUMBER}
            
            ## Instructions
            1. First, get the PR details to understand the context
            2. Read the files in the PR to understand what has been changed
            3. Analyze the feedback in the comment
            4. Make the necessary changes to address the feedback
            5. Commit your changes to the same branch
            6. Comment on the PR with a summary of your changes

            Begin by getting the PR details and understanding the context.
            EOF
            
            # Run Goose with the PR instructions
            goose run --instructions pr_instructions.txt > pr_response.txt
            
            # Create a comment on the PR with the response
            gh pr comment $PR_NUMBER --repo ${{ github.repository }} --body "$(cat pr_response.txt | grep -v "starting session" | grep -v "logging to" | tail -n 30)"