name: "goose ai developer agent"
description: "Uses Goose AI to help you fix issues and implement your code from just a description"
icon: activity
color: blue
inputs:
  task_request:
    description: 'Task request for Goose AI to complete'
    required: true
  validation:
    description: 'Instructions for how to test to confirm changes are okay'
    required: true
  create_pr:
    description: 'Optionally create a Pull Request (true/false)'
    required: false
    default: 'true'
  update_pr:
    description: 'Update Pull Request based on feedback if you mention @goose-ai'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:

    - name: Prepare tools 
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y ripgrep curl git jq wget pipx

    - name: Ensure pipx path
      run: pipx ensurepath
      shell: bash

    - name: Add pipx to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install Goose AI
      run: pipx install goose-ai
      shell: bash

    - name: Determine and Checkout Correct Branch
      shell: bash
      run: |
        # Determine if the event is a PR comment
        if [[ "${{ github.event_name }}" == "issue_comment" && "$(jq -r '.issue.pull_request' "$GITHUB_EVENT_PATH")" != "null" ]]; then
          echo "Triggered by a comment on a PR."

          # Extract the PR number from the event payload
          PR_NUMBER=$(jq -r '.issue.number' "$GITHUB_EVENT_PATH")
          
          # Use the GitHub API to get the PR details
          PR_DATA=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          
          # Extract the head ref (branch name)
          PR_HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
          echo "PR head ref is $PR_HEAD_REF"

          # Fetch and checkout the PR branch
          git fetch origin "$PR_HEAD_REF"
          git checkout "$PR_HEAD_REF"
        else
          echo "Not a PR comment event. Using the default branch."
        fi

    - name: Create plan for labelled issue
      if: ${{ github.event_name == 'issues' && github.event.action == 'labeled' }}
      shell: bash
      run: |
        printf "%s\n" \
          "kickoff_message: |" \
          "  This will follow tasks as given for the project and then try to complete them without input." \
          "  The tasks may be an enhancement, or a bug fix which came from an issue tracker." \
          "" \
          "tasks:" \
          "  - you are running in a CI-style environment and aim to try to complete the task assigned; the result will be changes to the code that are verified." \
          "  - keep iterating to completion until the task is satisfied, and tests are run." \
          "  - you will not be able to ask the user to take any steps, you have to do this on your own. You can do research (curl websites as needed)." \
          "  - decide if you are working on net new code or existing code." \
          "  - Try at least 3 approaches if you fail, do not just stop." \
          "  - use '&' if you need to run processes in the background as part of testing." \
          "  - Read ./task.txt for instructions on what issue(s) to do or fix, and then read ./validation.txt for how to know if the change or fix is working." \
          > plan.yaml

    - name: Create plan for PR feedback
      if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request != null && !contains(github.event.comment.body, 'goose-ai rollback') }}
      shell: bash
      run: |
        printf "%s\n" \
          "kickoff_message: |" \
          "  This will follow tasks as given for the project and then try to complete them end-to-end without input." \
          "  Feedback from past comments will be considered." \
          "" \
          "tasks:" \
          "  - You are working on a work in progress github pull request in a github workflow environment." \
          "  - get all feedback from previous pull request comments and include that with task." \
          "  - gh cli is available, as is GITHUB_CONTEXT environment variable for context." \
          "  - iterate to satisfy the task, validating it, and trying a few approaches if first failing, ensuring to take note of comments." \
          "  - Read ./task.txt for instructions on what to address, and ./validation.txt for how to know if the change is working. Important to address recent comment history for the current pull request." \
          > plan.yaml

    - name: Create task.txt and validation.txt
      if: ${{ !contains(github.event.comment.body, 'goose-ai rollback') }}
      shell: bash
      run: |
        echo "${{ inputs.task_request }}" > task.txt
        echo "${{ inputs.validation }}" > validation.txt

    - name: Run Goose Session
      if: ${{ !contains(github.event.comment.body, 'goose-ai rollback') }}
      shell: bash
      env: 
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        set -e

        echo "Task Request: ${{ inputs.task_request }}" > task.txt
        echo "Validation: ${{ inputs.validation }}" > validation.txt

        # Start the Goose session
        cd "$GITHUB_WORKSPACE"

        goose run plan.yaml
        rm -f task.txt validation.txt plan.yaml

    - name: Generate branch, commit, push, and create pull request for labelled issue
      if: ${{ inputs.create_pr == 'true' && github.event_name == 'issues' && github.event.action == 'labeled' }}
      shell: bash
      run: |
        # Generate a slug from the issue title, replacing spaces with dashes and ensuring lowercase
        SLUG=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | tr -cd '[:alnum:]-')
        
        # Construct the full branch name
        BRANCH_NAME="goose-ai/$SLUG-$(date +%s)"

        # Check out a new branch using the dynamically generated name
        git checkout -b $BRANCH_NAME

        # Configure git user
        git config --global user.email "goose-ai@block.xyz"
        git config --global user.name "goose"

        # Add and commit changes
        git add .
        git commit -m "Changes from Goose AI"

        # Push the branch to the remote repository
        git push origin $BRANCH_NAME

        # Create a pull request using the GitHub CLI
        gh pr create --head $BRANCH_NAME --title "${{ github.event.issue.title }}" --body "Resolves issue: ${{ github.event.issue.html_url }} ${{ github.event.issue.body }}

        Note: You can mention @goose-ai in a comment to request changes or improvements to this pull request."

    - name: Commit and Push Changes for PR Comment
      if: ${{ inputs.update_pr == 'true' && github.event_name == 'issue_comment' && github.event.issue.pull_request != null && !contains(github.event.comment.body, 'goose-ai rollback') }}
      shell: bash
      run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Comments addressed by goose AI"
          # Push changes to the current branch (which is the PR branch)
          git push origin HEAD
          
          # Add a comment to the PR
          PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
          gh pr comment $PR_NUMBER --body "_changes made by goose AI._ :bulb: **TIP:** Use \`@ goose-ai rollback\` (no space after @) to undo these changes."


    - name: Rollback Changes
      if: ${{ inputs.update_pr == 'true' && github.event_name == 'issue_comment' && github.event.issue.pull_request != null && contains(github.event.comment.body, 'goose-ai rollback') }}
      shell: bash
      run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Find the last commit with the message "Comments addressed by goose AI"
          COMMIT_TO_REVERT=$(git log --grep="Comments addressed by goose AI" -n 1 --pretty=format:"%H")
          
          if [ -n "$COMMIT_TO_REVERT" ]; then
            # Revert the commit
            git revert --no-edit $COMMIT_TO_REVERT
            
            # Push the revert commit
            git push origin HEAD
            
            # Add a comment to the PR
            PR_NUMBER=$(jq -r .issue.number "$GITHUB_EVENT_PATH")
            gh pr comment $PR_NUMBER --body "Successfully reverted the last goose AI changes."
            
            echo "_Successfully reverted the last goose AI changes._"
          else
            echo "No commit found with the message 'Comments addressed by goose AI'. Nothing to revert."
          fi